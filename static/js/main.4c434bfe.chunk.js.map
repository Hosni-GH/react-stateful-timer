{"version":3,"sources":["Timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","props","Start","myInterval","setInterval","setState","seconds","state","isOn","btnText","Reset","clearInterval","Stop","s","secs","mins","hrs","className","id","this","msToTime","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uRAsEeA,E,YApEX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAOTC,MAAQ,WACL,EAAKC,WAAYC,aAAY,WACzB,EAAKC,SAAS,CACVC,QAAQ,EAAKC,MAAMD,QAAQ,MAEjC,KACF,EAAKD,SAAS,CACVG,MAAK,EACLC,QAAQ,WAhBG,EAmBnBC,MAAQ,WACJC,cAAc,EAAKR,YACnB,EAAKE,SAAU,CACXC,QAAQ,EACRE,MAAK,EACLC,QAAQ,WAxBG,EA2BnBG,KAAO,WACHD,cAAc,EAAKR,YACnB,EAAKE,SAAS,CACVG,MAAK,EACLC,QAAQ,WA7BZ,EAAKF,MAAQ,CACTD,QAAQ,EACRE,MAAK,EACLC,QAAQ,SALG,E,sEAkCVI,GACL,IAAIC,EAAOD,EAAI,GAEXE,GADJF,GAAKA,EAAIC,GAAQ,IACF,GACXE,GAAOH,EAAIE,GAAQ,GAIvB,OAHAC,EAAIA,EAAI,GAAM,IAAIA,EAAMA,EACxBD,EAAKA,EAAK,GAAM,IAAIA,EAAOA,EAC3BD,EAAKA,EAAK,GAAM,IAAIA,EAAOA,EACpB,yBAAKG,UAAU,UACV,yBAAKA,UAAU,eAAc,0BAAMC,GAAG,SAASF,GAC/C,0BAAMC,UAAU,aAAhB,UACA,yBAAKA,UAAU,eAAc,0BAAMC,GAAG,SAAT,KAC7B,0BAAMD,UAAU,aAAhB,MACA,yBAAKA,UAAU,eAAc,0BAAMC,GAAG,WAAWH,GACjD,0BAAME,UAAU,aAAhB,YACA,yBAAKA,UAAU,eAAc,0BAAMC,GAAG,SAAT,KAC7B,0BAAMD,UAAU,aAAhB,MACA,yBAAKA,UAAU,eAAc,0BAAMC,GAAG,YAAYJ,GAClD,0BAAMG,UAAU,aAAhB,gB,+BAIZ,OAAS,yBAAKA,UAAU,kBACZ,yBAAKA,UAAU,yBAChBE,KAAKC,SAASD,KAAKZ,MAAMD,SACpB,yBAAKW,UAAU,QACX,4BAAQC,GAAG,kBAAkBG,QAAUF,KAAKZ,MAAMC,KAAkBW,KAAKP,KAAhBO,KAAKjB,OAAkBiB,KAAKZ,MAAME,SAC3F,4BAAQS,GAAG,YAAYG,QAASF,KAAKT,OAArC,gB,GA9DRY,a,MCWLC,MARf,WACE,OACE,yBAAKN,UAAU,OACb,kBAAC,EAAD,QCKcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.4c434bfe.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nclass Timer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            seconds:0,\r\n            isOn:false,\r\n            btnText:\"Start\"\r\n         }\r\n    }\r\n     Start = () =>{\r\n        this.myInterval= setInterval(()=>{\r\n            this.setState({\r\n                seconds:this.state.seconds+1\r\n            })\r\n        },1000)\r\n        this.setState({\r\n            isOn:true,\r\n            btnText:\"Pause\"\r\n        })\r\n    }\r\n    Reset = () => {\r\n        clearInterval(this.myInterval)\r\n        this.setState ({\r\n            seconds:0,\r\n            isOn:false,\r\n            btnText:\"Start\"\r\n        })\r\n    }\r\n    Stop = () =>{\r\n        clearInterval(this.myInterval)\r\n        this.setState({\r\n            isOn:false,\r\n            btnText:\"Start\"\r\n        })\r\n    }\r\n    msToTime(s) {\r\n        var secs = s % 60;\r\n        s = (s - secs) / 60;\r\n        var mins = s % 60;\r\n        var hrs = (s - mins) / 60; \r\n        hrs=hrs<10 ? (\"0\"+hrs): hrs;\r\n        mins=mins<10 ? (\"0\"+mins): mins;\r\n        secs=secs<10 ? (\"0\"+secs): secs;\r\n        return <div className=\"output\">\r\n                    <div className=\"output-flex\"><span id=\"hours\">{hrs}</span>\r\n                    <span className=\"date-text\">Hours</span></div>\r\n                    <div className=\"output-flex\"><span id=\"hours\">:</span>\r\n                    <span className=\"date-text\">:</span></div>\r\n                    <div className=\"output-flex\"><span id=\"minutes\">{mins}</span>\r\n                    <span className=\"date-text\">Minutes</span></div>\r\n                    <div className=\"output-flex\"><span id=\"hours\">:</span>\r\n                    <span className=\"date-text\">:</span></div>\r\n                    <div className=\"output-flex\"><span id=\"secondes\">{secs}</span>\r\n                    <span className=\"date-text\">Secondes</span></div>\r\n                </div>\r\n      }\r\n    render() { \r\n        return ( <div className=\"main-container\">\r\n                    <div className=\"main-container-output\">\r\n                  {this.msToTime(this.state.seconds)}   \r\n                        <div className=\"btns\">\r\n                            <button id=\"btn-start-pause\" onClick={!this.state.isOn ? this.Start:this.Stop}>{this.state.btnText}</button>\r\n                            <button id=\"btn-reset\" onClick={this.Reset}>Reset</button>\r\n                        </div>\r\n                    </div>\r\n                 </div> );\r\n    }\r\n}\r\n \r\nexport default Timer;","import React from 'react';\nimport Timer from './Timer';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Timer/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}